h1. Kafka

# [[Kafka#1. Основная информация|Основная информация]]
# [[Kafka#2. Назначение|Назначение]]
# [[Kafka#3. Установка|Установка]]
# [[Kafka#4. Схема использования|Схема использования]]
# [[Kafka#5. Практики программной реализации|Практики программной реализации]]

h2. 1. Основная информация

Распределённая система очередей сообщений.

https://ru.wikipedia.org/wiki/Apache_Kafka
http://kafka.apache.org
https://gist.github.com/ashrithr/5811266

h2. 2. Назначение

Планируется развёртывание на [[Центральная шина|Центральной шине]] для следующих целей:
* Централизованная система передачи сообщений;
* Броадкастинг и балансировка нагрузки.

h2. 3. Установка

Перед началом установки убедиться, что установлен и корректно запущен [[ZooKeeper]].
Все действия необходимо производить под root:

# Создать основную папку (*mkdir /opt/kafka*);
# Распаковать kafka в */opt/kafka*;
# Создать пользователя kafka (*adduser kafka*);
# Назначить пользователя kafka владельцем основной папки (*chown -R kafka /opt/kafka*);
# Создать папки логов и данных (*mkdir /var/log/kafka*, *mkdir /var/data/kafka*);
# Назначить kafka владельцем созданных папок (*chown -R kafka /var/log/kafka*, *chown -R kafka /var/data/kafka*);
# Назначить права для основной папки (*chmod -R 771 /opt/kafka*);
# Назначить права для папок логов и данных (*chmod -R 775 /var/log/kafka*, *chmod -R 775 /var/data/kafka*);
# Перезайти под пользователем kafka;
# В файле конфигурации */opt/kafka/config/server.properties* заменить значение параметра *host.name* на внешний IP-адрес машины;
# В файле конфигурации */opt/kafka/config/server.properties* заменить значение параметра *advertised.host.name* на внешний IP-адрес машины;
# В файле конфигурации */opt/kafka/config/server.properties* заменить значение параметра *log.dirs* на */var/data/kafka*;
# В файле конфигурации */opt/kafka/config/server.properties* заменить значение параметра *zookeeper.connect* на *localhost:2181/kafka*;
# В файле конфигурации */opt/kafka/config/consumer.properties* заменить значение параметра *zookeeper.connect* на *localhost:2181/kafka*;
# В файле конфигурации */opt/kafka/config/log4j.properties* заменить значение параметра *kafka.logs.dir* на */var/log/kafka*;
# В файле конфигурации */opt/kafka/config/zookeeper.properties* заменить значение параметра *dataDir* на */var/data/zookeeper*;
# В файле */opt/kafka/bin/kafka-run-class.sh* найти присвоение значения *LOG_DIR* и заменить строку на *"/var/log/kafka"*;
# Запустить */opt/kafka/bin/kafka-server-start.sh -daemon /opt/kafka/config/server.properties*;
# Убедиться, что в /var/data/kafka созданы файлы;
# Убедиться, что в /var/log/kafka созданы файлы логов;
# Создать тестовый топик */opt/kafka/bin/kafka-topics.sh --create --zookeeper localhost:2181/kafka --replication-factor 1 --partitions 1 --topic test*;
# Убедиться, что топик создан  */opt/kafka/bin/kafka-topics.sh --describe --zookeeper localhost:2181/kafka --topic test*;
# Проверить отправку сообщений  */opt/kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test*;
## Появиться предупреждение о некорректности названия топика - следует проигнорировать, это проблемы Kafka, которая будет исправлена в следующем релизе;
## Записать несколько сообщений в виде строк - каждая строка это одно сообщение;
## Завершить работу с помощью *Ctrl+C*.
# Проверить приём сообщений  */opt/kafka/bin/kafka-console-consumer.sh --zookeeper localhost:2181/kafka --from-beginning --topic test*
## Все введённые ранее строки должны быть отображены;
## Завершить работу с помощью *Ctrl+C*.
# Если потребуется остановить Kafka - необходимо запустить скрипт */opt/kafka/bin/kafka-server-stop.sh*.

h2. 4. Схема использования

* Вместо использования очереди как обемена между двумя конкретными серверами (MSMQ) предлагается создавать общий *топик* (*topic*, агрегатор сообщений сходного назначения).
* Все *отправители сообщений* (*producer*) вместо рассылки по конкретным адресам разделяют сообщения на топики (в соответствии с бизнес логикой) и отправляют сообщения в них, не зная кто будет их принимать.
* *Потребители сообщений* (*consumer*) могут подписаться на определённые топики и, с момента регистрации, смогут получить все отправленные сообщения. При этом получатели остаются совершенно независимы друг от друга, гарантируется доставка сообщений до всех с сохранением порядка отправки и транзакционности (подтверждение получения).
Типичный сценарий - резервные сервера, в данной схеме они будут получать точно такой же набор сообщений, что и основной сервер.
* Дополнительное вводится понятия *группы* (*group*) - группа может быть указана потребителем при регистрации. Для потребителей, входящих в одну группу, в рамках каждого топика будет осуществляться балансировка нагрузки, т.е. они будут получать не все сообщения, а некоторую пропорциональную долю. Это сценарий для горизонтального масштабирования компонентов, например Сервера хранения.

h2. 5. Практики программной реализации

https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+Producer+Example
https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+Example
https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example